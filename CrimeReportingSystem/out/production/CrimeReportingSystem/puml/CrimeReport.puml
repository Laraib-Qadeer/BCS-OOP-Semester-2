@startuml
skinparam classAttributeIconSize 0

class AppController {
    + run(): void
    + showWelcomeMenu(): void
    + handleRegistration(): void
    + handleLogin(): void
    + handleAnonymousReport(): void
    + showMainMenu(): void
    + showCitizenMenu(): void
    + showAdminMenu(): void
    + showPoliceMenu(): void
    + handleRegularReport(): void
    + handleViewOwnReports(): void
    + handleExportMyReports(): void
    + handleViewAllReports(): void
    + handleStatusUpdate(): void
    + handleEmergencyReport(): void
    + handleExportReports(): void
    + handleCreatePoliceAccount(): void
    + readAttachments(): List<String>
}

class AdminDashboard {
    + start(Stage): void
    + createButton(String, Runnable): Button
}
class CitizenDashboard {
    + start(Stage): void
}
class CitizenLoginOrRegisterScreen {
    + start(Stage): void
}
class CreatePoliceScreen {
    + start(Stage): void
    + showAlert(String): void
}
class HandleEmergencyScreen {
    + start(Stage): void
}
class LoginRegisterScreen {
    + start(Stage): void
}
class MainApp {
    + start(Stage): void
}
class ManageUsersScreen {
    + start(Stage): void
}
class PoliceDashboard {
    + start(Stage): void
}
class ReportDetailPopup {
    + show(CrimeReport, Runnable): void
}
class RoleSelectionScreen {
    + start(Stage): void
}
class SceneNavigator {
    + navigateTo(String): void
    + getScene(String): Scene
}
class StatusUpdateScreen {
    + start(Stage): void
}
class SubmitReportScreen {
    + start(Stage): void
}
class UserDetailPopup {
    + show(User, Runnable, Runnable): void
}
class ViewAllReportsScreen {
    + start(Stage): void
}
class ViewReportsScreen {
    + start(Stage): void
}
abstract class User {
    - id: String
    - name: String
    - email: String
    - password: String
    - role: String
    + User(String, String, String, String, String)
    + displayMenu(): void
}
class Admin {
    + Admin(String, String, String, String)
    + displayMenu(): void
}
class Police {
    + Police(String, String, String, String)
    + displayMenu(): void
}
class Citizen {
    + Citizen(String, String, String, String)
    + displayMenu(): void
}
class CrimeReport {
    - reportId: String
    - reporterId: String
    - title: String
    - description: String
    - location: String
    - timestamp: LocalDateTime
    - status: String
    - attachments: List<String>
}
class AuthServices {
    + register(User): void
    + login(String, String): User
}
class CrimeServices {
    + submitReport(CrimeReport): void
    + getReportsByUserId(String): List<CrimeReport>
    + getAllReports(): List<CrimeReport>
    + updateReportStatus(String, String): void
}
class NotificationService {
    + sendEmail(String, String): void
}
class Session {
    + setCurrentUser(User): void
    + getCurrentUser(): User
}
class FileStorage {
    + readReports(): List<CrimeReport>
    + saveReports(List<CrimeReport>): void
    + readUsers(): List<User>
    + saveUsers(List<User>): void
}
class RuntimeTypeAdapterFactory {
}

' Inheritance
User <|-- Admin
User <|-- Police
User <|-- Citizen

' Real & String-based Associations
AppController --> AuthServices
AppController --> CrimeServices
AppController --> NotificationService
AppController --> Session
AppController --> CrimeReport
AppController --> User
AppController --> SubmitReportScreen
AppController --> ViewAllReportsScreen
AppController --> ViewReportsScreen
AppController --> CreatePoliceScreen
AppController --> StatusUpdateScreen
AppController --> HandleEmergencyScreen
AppController --> SceneNavigator
AppController --> ManageUsersScreen
AppController --> ReportDetailPopup
AppController --> CitizenDashboard
AppController --> AdminDashboard
AppController --> RoleSelectionScreen
AppController --> PoliceDashboard
AppController --> CitizenLoginOrRegisterScreen
AppController --> LoginRegisterScreen
AppController --> MainApp

SceneNavigator --> SubmitReportScreen
SceneNavigator --> ViewAllReportsScreen
SceneNavigator --> ViewReportsScreen
SceneNavigator --> AdminDashboard
SceneNavigator --> CitizenDashboard
SceneNavigator --> CreatePoliceScreen
SceneNavigator --> HandleEmergencyScreen
SceneNavigator --> StatusUpdateScreen
SceneNavigator --> RoleSelectionScreen
SceneNavigator --> PoliceDashboard
SceneNavigator --> CitizenLoginOrRegisterScreen
SceneNavigator --> LoginRegisterScreen

ManageUsersScreen --> UserDetailPopup
ReportDetailPopup --> CrimeReport
UserDetailPopup --> User
CrimeServices --> FileStorage
AuthServices --> User
FileStorage --> CrimeReport
FileStorage --> User

@enduml
